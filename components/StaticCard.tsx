import {
  Link,
  Flex,
  Box,
  Button,
  Grid,
  Text,
  Spacer,
  Heading,
  Center,
} from "@chakra-ui/react";
import { FiPlus } from "react-icons/fi";
import { motion } from "framer-motion";
import "@fontsource/anonymous-pro/700.css";
import React, { useState, useEffect, useRef } from "react";
import { gsap } from "gsap/dist/gsap";
import { MotionPathPlugin } from "gsap/dist/MotionPathPlugin";
import { SplitText } from "gsap/dist/SplitText";
import StaticBg from "../components/StaticBg";

gsap.registerPlugin(MotionPathPlugin, SplitText);
const StaticCard = () => {
  const poem: string = "Summer rain, the last of the fireflies, go out";
  const address: string = "0x4adaf983349c49defe8d7a4686202d24b25d0ce3";
  const color1: string = "#".concat(address.slice(2, 8));
  const color2: string = "#".concat(address.slice(-6));
  const cardSize: number = 360;
  const textPath: string =
    "M30,15 h300 a16,16 0 0 1 16,16 v300 a16,16 0 0 1 -16,16 h-300 a16,16 0 0 1 -16,-16 v-300 a16,16 0 0 1 16,-16 z";

  //ref
  let animatedText = useRef(null);
  let animatedAddress = useRef(null);
  let svgPath = useRef(null);

  //typewriter animation 2
  var lines: String[] = poem.split(",");
  var iSpeed = 50; // time delay of print out
  var iIndex = 0; // start printing array at this posision
  var iArrLength = lines[0].length; // the length of the text array
  var iScrollAt = 6; // start scrolling up at this many lines

  var iTextPos = 0; // initialise text position
  var sContents = ""; // initialise contents variable
  var iRow; // initialise current row

  function typeWriter() {
    sContents = " ";
    iRow = Math.max(0, iIndex - iScrollAt);
    var destination = animatedText.current;
    while (iRow < iIndex) {
      sContents += lines[iRow++] + "<br />";
    }
    destination.innerHTML = sContents + lines[iIndex].substring(0, iTextPos);
    if (iTextPos++ == iArrLength) {
      iTextPos = 0;
      iIndex++;
      if (iIndex != lines.length) {
        iArrLength = lines[iIndex].length;
        setTimeout(() => typeWriter(), 500);
      }
    } else {
      setTimeout(() => typeWriter(), iSpeed);
    }
  }

  useEffect(() => {
    typeWriter();
  }, [animatedText]);

  //animate address
  const tl = gsap.timeline({
    paused: true,
    // reversed: true,
    onComplete: () => tl.restart(),
  });
  const dur = 20;
  const each = dur * 0.01;
  function roundTo2(num) {
    return Math.round((num + Number.EPSILON) * 100) / 100;
  }

  useEffect(() => {
    const splitText = new SplitText(animatedAddress.current, {
      type: "chars",
      charsClass: "letter",
    });

    splitText.chars.forEach((char, i) => {
      char.classList.add("c" + char.innerHTML);
      const timeOffset = i * each;
      const startTime = dur / 2 + timeOffset;
      const pathOffset = roundTo2(startTime / dur) / 1.2;
      const tween = gsap.to(splitText.chars[i], {
        motionPath: {
          path: svgPath.current,
          align: svgPath.current,
          alignOrigin: [0.5, 0.5],
          autoRotate: true,
          start: pathOffset,
          end: 1 + pathOffset,
        },
        immediateRender: true,
        duration: 24,
        ease: "none",
      });
      tl.add(tween, 0);
    });
  }, [animatedAddress]);

  return (
    <Box>
      <Center>
        <Flex flexDirection="column" height="100vh" id="container">
          <Spacer />
          <Grid
            id="card"
            bg="transparent"
            boxSize={cardSize}
            overflow="hidden"
            onMouseEnter={() => tl.play()}
            onMouseLeave={() => tl.pause()}
          >
            <Flex
              id="card-content"
              padding={8}
              flexDirection="column"
              justifyContent="center"
            >
              <Heading
                ref={(el) => (animatedText.current = el)}
                size="lg"
                color="Purple 700"
                fontFamily="Anonymous Pro"
                width="100%"
              >
                {poem}
              </Heading>
              <Text mt={2}>
                â€” Generated by{" "}
                <Link>
                  <Text as="u">ikani.ai</Text>
                </Link>
              </Text>
            </Flex>

            <Box
              id="address-container"
              boxSize={cardSize}
              position="absolute"
              opacity="0.6"
            >
              <svg
                width="100%"
                height="100%"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                // stroke="red"
                viewBox="0 0 360 360"
                preserveAspectRatio="none"
              >
                <path ref={(el) => (svgPath.current = el)} d={textPath} />
              </svg>
            </Box>
            <StaticBg data={address} />
          </Grid>
          <Text
            fontSize="sm"
            as="samp"
            ref={(el) => (animatedAddress.current = el)}
          >
            {address}
          </Text>
          <Button
            leftIcon={<FiPlus />}
            my={6}
            mx={12}
            mt={6}
            size="lg"
            borderRadius="full"
            colorScheme="blue"
          >
            Generate new
          </Button>
          <Spacer />
        </Flex>
      </Center>
    </Box>
  );
};

export default StaticCard;
